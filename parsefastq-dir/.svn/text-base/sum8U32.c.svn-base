#ifndef __sum8U32_h__
#include "sum8U32.h"
#endif

void ap_sum8U32_init(struct ap_sum8U32_data *block)
{
}

void ap_sum8U32_destroy(struct ap_sum8U32_data *block)
{
};

void ap_sum8U32_push(struct ap_sum8U32_data *block, int port, void *ptr, int count)
{
   
   const int in_count_one = ap_get_input_count(block,0);
   const int in_count_two = ap_get_input_count(block,1);
   const uint8_t block_size = sizeof(VECTORINT) / sizeof(UNSIGNED32);
   const uint8_t size = (block_size - 1);

   if(in_count_one > size && in_count_two > size)
   {
         VECTORINT *x0 = ap_get_input_data(block,0);
         VECTORINT *x1 = ap_get_input_data(block,1);
         
         VECTORINT *y0 = (VECTORINT*) ap_allocate(block,0,block_size);
         *y0 = *(x0) + *(x1);
         ap_send(block,0,block_size);
         ap_release(block,0,block_size);
         ap_release(block,1,block_size);
   }
};

int ap_sum8U32_go(struct ap_sum8U32_data *block)
{
   return (APSTOP);
};

void ap_sum8U32_push_signal(struct ap_sum8U32_data *block, int port, int type, int value)
{
};
